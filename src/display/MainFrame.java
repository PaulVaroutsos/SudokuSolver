package display;

import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import satsolver.dpSolver;
import sudokusolver.Mapper;
import sudokusolver.SudokuReader;
import sudokusolver.UnMapper;

/**
 * This is the main class that creates a SudokuReader object which reads
 * in the sudoku puzzle from a file, extracts the clauses.The clauses created 
 * from the SudokuReader are unique to the specific sudoku puzzle.
 *
 * It then creates a Mapper object which outputs the clauses common for all 
 * sudoku puzzles.
 * 
 * Program startup logic is found in the loadPuzzleMenuItemActionPerformed method. 
 *
 * @author Paul Varoutsos, Tom Devito
 * February 2009
 * March 2012
 */
public class MainFrame extends javax.swing.JFrame {

    //JComponent that displays the sudoku puzzle.
    private SudokuDisplay sudokuDisplay = new SudokuDisplay();

    /**
     * Creates new form MainFrame
     */
    public MainFrame(String title) {
        super(title);
        initComponents();
        this.getContentPane().add(sudokuDisplay);
        this.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        closeMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        loadPuzzleMenuItem = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jMenu1.setText("File");

        closeMenuItem.setText("Close");
        closeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(closeMenuItem);

        jMenuBar1.add(jMenu1);

        editMenu.setText("Edit");

        loadPuzzleMenuItem.setText("Load Puzzle");
        loadPuzzleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadPuzzleMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(loadPuzzleMenuItem);

        jMenuBar1.add(editMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_closeMenuItemActionPerformed

    private void loadPuzzleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadPuzzleMenuItemActionPerformed
        try {
            //The files that we use for input/ouput
            JFileChooser fc = new JFileChooser();
            int fileChosen = fc.showOpenDialog(null);
            
            //Don't continue.  User clicked cancel.
            if(fileChosen != 0){
                return;
            }
            
            String pathname = fc.getSelectedFile().getPath();

            FileReader in = new FileReader(pathname);
            StringBuffer out = new StringBuffer("");

            //Objects that create the clauses and outputs to a file
            SudokuReader sr = new SudokuReader(in, out);
            Mapper m = new Mapper(out);

            //Get puzzle specific clauses
            sr.extractClauses();

            //Get clauses that are true for all sudoku puzzles (11988 in total)
            m.buildSudokuClauses();

            in.close();

            //Give the file to the solver and check the solution.
            dpSolver solver = new dpSolver();
            int[] solution = solver.solve(out);
            
            sudokuDisplay.updateArray(UnMapper.unMap(solution));
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(this, "An error occured while opening the sudoku puzzle.", null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_loadPuzzleMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                MainFrame mf = new MainFrame("Sudoku Solver");
                mf.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem closeMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem loadPuzzleMenuItem;
    // End of variables declaration//GEN-END:variables
}